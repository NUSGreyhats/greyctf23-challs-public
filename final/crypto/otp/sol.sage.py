

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6 = Integer(6); _sage_const_19521 = Integer(19521); _sage_const_1 = Integer(1); _sage_const_13 = Integer(13); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_40 = Integer(40); _sage_const_110 = Integer(110); _sage_const_90 = Integer(90); _sage_const_3 = Integer(3); _sage_const_20 = Integer(20); _sage_const_100 = Integer(100); _sage_const_4 = Integer(4); _sage_const_16 = Integer(16)
from pwn import *
from secrets import randbits

n = _sage_const_6 
while True:
    r = remote("34.124.157.94", _sage_const_19521 )

    r.recvuntil("p: ")
    p = int(r.recvline().decode())
    factors = {}
    # Partial factorisation
    k = p-_sage_const_1 

    for i in range(_sage_const_13 ):
        for _ in range(_sage_const_5 ):
            f = ecm.one_curve(k, factor_digits=i)
            k = k//f[_sage_const_0 ]
            if (f[_sage_const_0 ] != _sage_const_1 ):        
                for t in factor(f[_sage_const_0 ]):
                    if t not in factors:
                        factors[t[_sage_const_0 ]] = _sage_const_0 
                    factors[t[_sage_const_0 ]] += t[_sage_const_1 ]

    print(factors)

    temp = []
    for f in factors: 
        if (f <= _sage_const_2 **_sage_const_5 ): continue
        if (f >= _sage_const_2 **_sage_const_40 ): continue
        if (factors[f] == _sage_const_1 ):
            temp.append(f)

    factors = temp
    factors.sort()

    print(factors)
    k = _sage_const_1 
    for i in factors:
        k *= i
    
    print(int(k).bit_length())

    if (k >= _sage_const_2 **_sage_const_110 ):
        break
    r.close()

r.recvuntil("pub: [")
pub = list(map(int, r.recvline().decode()[:-_sage_const_2 ].split(',')))

y = [randbits(_sage_const_90 ) for _ in range(n)]

payload = ''
for i in range(n):
    payload += str(y[i]) + ','

payload = payload[:-_sage_const_1 ]
r.sendline(payload)

r.recvuntil("Token Hash: ")
skey = int(r.recvline().decode())

r.recvuntil("OTP Hash: [")
ct = list(map(int, r.recvline().decode()[:-_sage_const_2 ].split(',')))

A = GF(p)(_sage_const_1 )

for i in range(_sage_const_1 , len(ct)):
    A *= pow(ct[i], y[i - _sage_const_1 ], p)

A = A / pow(ct[_sage_const_0 ], skey, p)

g = GF(p)(_sage_const_3 **_sage_const_20 )

vals = []
        
for f in factors:
    vals.append(discrete_log(A ** ((p-_sage_const_1 )//f), g ** ((p-_sage_const_1 )//f), f))

s = crt(vals, factors)

print(s)

X = _sage_const_2 **_sage_const_100 

M = [
    [_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , X * y[_sage_const_0 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , X * y[_sage_const_1 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , X * y[_sage_const_2 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , X * y[_sage_const_3 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , X * y[_sage_const_4 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , X * y[_sage_const_5 ], _sage_const_0 ],
    [_sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , -X * s, _sage_const_2 **_sage_const_16 ]
]

M = Matrix(ZZ, M).LLL()

print(M)

row = _sage_const_0 

for i in range(_sage_const_6 ):
    if (M[i][-_sage_const_1 ] != _sage_const_0 ):
        row = i
        break

payload = ''
for i in range(_sage_const_6 ):
    payload += str(M[row][i]) + ','

payload = payload[:-_sage_const_1 ]
r.sendline(payload)

r.interactive()

