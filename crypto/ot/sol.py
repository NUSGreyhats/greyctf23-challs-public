from Crypto.Util.number import getPrime, long_to_bytes
from pwn import *
import hashlib

def mult(arr):
    res = 1
    for i in arr:
        res *= i
    return res

def xor(a, b):
    return bytes([i ^ j for i,j in zip(a,b)])

def decrypt(key, msg):
    key = hashlib.shake_256(long_to_bytes(key)).digest(len(msg))
    return xor(key, msg)

n1_fact = [7, 462770317, 5694507743]
n2_fact = [2, 2, 2, 3, 41, 857, 1559, 339023, 2343209079636457154747528091249224327826476095035652043863204963528742512659334966004677662229161019950483083366584485458548138280449093341862002378977954167933497368219007597603755403106504457342524731378152141064507021879321139562219662472972474776122252631953409761238215160613209971558173741803026979254214210727528142216553898876030291198626181784265607599995908726045509487718799462181771728090038238068962056777644992988892938124008992438950549472345044426855638833877506876728312782161167647747290824784748696754246159892136814441488314325403562730367144917966990736400033017352989925334985594945295887660260144968909191465152707699303607693854298865103549470740231242767344488974983844208891266194478474170742048476973621036892530585345861314676222967700381339468070033580937158526944117868721156005290278361321242499022780770109629887890569960968326394919597157591985091545402257594210821663401565236232981650710950040799762586385335353099840799701838611631226315955970308578031727803805560549254048967932250161687173341134600016684183728290540325814498855833184665851382340485507560611728519283837988674497703692142667372814441920058176679479875671554322375842868866916030160361839169885024648792639108310409]

n1 = mult(n1_fact)**64
n2 = mult(n2_fact)

print(n1.bit_length())

assert n1 + 23 == n2

r = remote("34.124.157.94", 10521, level='debug')

r.sendline(str(n1))
r.recvuntil("pow(k1, e, N) = ")
c1 = int(r.recvline())

r.recvuntil("pow(k2, e, N+23) =")
c2 = int(r.recvline())

r.recvuntil("flag = ")

flag = r.recvline().decode()
flag = bytes.fromhex(flag)

phi1 = 1
for i in n1_fact:
    phi1 *= i - 1

phi1 *= mult(n1_fact)**63

phi2 = 1
for i in n2_fact:
    phi2 *= i - 1

phi2 *= 4

e = 0x10001

d1 = pow(e, -1, phi1)
d2 = pow(e, -1, phi2)

k1 = pow(c1, d1, n1)
k2 = pow(c2, d2, n2)

k = k1 ^ k2

print(decrypt(k, flag))
